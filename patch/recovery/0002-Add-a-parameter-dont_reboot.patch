From dc58173dcd42ff2550853df7dd65dc5eab0a40af Mon Sep 17 00:00:00 2001
From: "Guo, Jade" <jade.guo@intel.com>
Date: Mon, 14 Oct 2024 23:11:00 +0800
Subject: [PATCH] Add a parameter --dont_reboot

If --dont_reboot were added, system won't directly reboot after OTA
update is done.

Signed-off-by: Guo, Jade <jade.guo@intel.com>
---
 install/include/install/install.h |  1 +
 recovery.cpp                      | 16 ++++++++++++++++
 2 files changed, 17 insertions(+)

diff --git a/install/include/install/install.h b/install/include/install/install.h
index 0f5102f8..19bc9776 100644
--- a/install/include/install/install.h
+++ b/install/include/install/install.h
@@ -37,6 +37,7 @@ enum InstallResult {
   INSTALL_RETRY,
   INSTALL_KEY_INTERRUPTED,
   INSTALL_REBOOT,
+  INSTALL_DONE,
 };
 
 enum class OtaType {
diff --git a/recovery.cpp b/recovery.cpp
index 5ef038ba..d2765151 100644
--- a/recovery.cpp
+++ b/recovery.cpp
@@ -87,6 +87,7 @@ static bool save_current_log = false;
  *   --show_text - show the recovery text menu, used by some bootloader (e.g. http://b/36872519).
  *   --set_encrypted_filesystem=on|off - enables / diasables encrypted fs
  *   --just_exit - do nothing; exit and reboot
+ *   --dont_reboot - stop the machine from rebooting if install_success, this is for OTA coordinator
  *
  * After completing, we remove /cache/recovery/command and reboot.
  * Arguments may also be supplied in the bootloader control block (BCB).
@@ -380,6 +381,10 @@ static Device::BuiltinAction PromptAndWait(Device* device, InstallResult status)
         // after installing a package.
         LOG(FATAL) << "Invalid status code of INSTALL_REBOOT";
         break;
+      case INSTALL_DONE:
+        LOG(INFO) << "Jade: INSTALL_DONE ui->SetBackground(RecoveryUI::NONE";
+        ui->SetBackground(RecoveryUI::NONE);
+        break;
     }
     ui->SetProgressType(RecoveryUI::EMPTY);
 
@@ -619,6 +624,7 @@ Device::BuiltinAction start_recovery(Device* device, const std::vector<std::stri
     { "wipe_cache", no_argument, nullptr, 0 },
     { "wipe_data", no_argument, nullptr, 0 },
     { "wipe_package_size", required_argument, nullptr, 0 },
+    { "dont_reboot", no_argument, nullptr, 0 },
     { nullptr, 0, nullptr, 0 },
   };
 
@@ -636,6 +642,7 @@ Device::BuiltinAction start_recovery(Device* device, const std::vector<std::stri
   bool shutdown_after = false;
   int retry_count = 0;
   bool security_update = false;
+  bool dont_reboot = false;
   std::string locale;
 
   auto args_to_parse = StringVectorToNullTerminatedArray(args);
@@ -685,6 +692,8 @@ Device::BuiltinAction start_recovery(Device* device, const std::vector<std::stri
           should_wipe_data = true;
         } else if (option == "wipe_package_size") {
           android::base::ParseUint(optarg, &wipe_package_size);
+        } else if (option == "dont_reboot") {
+          dont_reboot = true;
         }
         break;
       }
@@ -762,6 +771,7 @@ Device::BuiltinAction start_recovery(Device* device, const std::vector<std::stri
       } else if (install_with_fuse || should_use_fuse) {
         LOG(INFO) << "Installing package " << update_package << " with fuse";
         status = InstallWithFuseFromPath(update_package, device);
+        LOG(INFO) << "Jade got status, which is " << status <<"\n";
       } else if (auto memory_package = Package::CreateMemoryPackage(
                      update_package,
                      std::bind(&RecoveryUI::SetProgress, ui, std::placeholders::_1));
@@ -871,6 +881,12 @@ Device::BuiltinAction start_recovery(Device* device, const std::vector<std::stri
   //  - In all other cases, reboot the device. Therefore, normal users will observe the device
   //    rebooting a) immediately upon successful finish (INSTALL_SUCCESS); or b) an "error" screen
   //    for 5s followed by an automatic reboot.
+  if (status == INSTALL_SUCCESS && dont_reboot) {
+    status = INSTALL_NONE;
+    LOG(INFO) << "Jade rewrote INSTALL_SUCCESS as INSTALL_NONE :)\n";
+    ui->Print("OTA status: INSTALL_SUCCESS\n");
+  }
+
   if (status != INSTALL_REBOOT) {
     if (status == INSTALL_NONE || ui->IsTextVisible()) {
       auto temp = PromptAndWait(device, status);
-- 
2.34.1

