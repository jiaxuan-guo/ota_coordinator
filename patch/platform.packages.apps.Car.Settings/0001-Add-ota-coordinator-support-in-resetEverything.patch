From 7ca082a76629019905b6b52e0c2e63071e02179e Mon Sep 17 00:00:00 2001
From: Jade Guo <jade.guo@intel.com>
Date: Mon, 11 Nov 2024 02:03:32 +0000
Subject: [PATCH] Add ota-coordinator support in resetEverything

In ota_coordinator service is off, do the original factory reset;
Otherwise use ota coordinater service to do the whole factory reset
with SOS.

Tracked-On: OAM-127157
Signed-off-by: Jade Guo <jade.guo@intel.com>
---
 .../system/FactoryResetConfirmFragment.java   | 147 +++++++++++++++++-
 1 file changed, 139 insertions(+), 8 deletions(-)

diff --git a/src/com/android/car/settings/system/FactoryResetConfirmFragment.java b/src/com/android/car/settings/system/FactoryResetConfirmFragment.java
index 7a1e2b1f2..4bee44bb1 100644
--- a/src/com/android/car/settings/system/FactoryResetConfirmFragment.java
+++ b/src/com/android/car/settings/system/FactoryResetConfirmFragment.java
@@ -36,16 +36,35 @@ import com.android.car.ui.toolbar.MenuItem;
 import java.util.Collections;
 import java.util.List;
 
+import android.util.Slog;
+import android.util.Log;
+import android.net.LocalSocket;
+import android.net.LocalSocketAddress;
+import libcore.io.IoUtils;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileDescriptor;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import android.os.SystemProperties;
+
 /**
  * Presents the user with a final warning before issuing the request to reset the head unit to its
  * default "factory" state.
  */
 public class FactoryResetConfirmFragment extends SettingsFragment {
-
+    private static final String TAG = "FactoryResetConfirmFragment";
     private MenuItem mClearConfirmButton;
     @VisibleForTesting
     AsyncTask<Void, Void, Void> mPersistentDataWipeTask;
 
+    // The socket at /dev/socket/ota_socket to communicate with ota coordinator.
+    private static final String OTA_SOCKET = "ota_socket";
+    private static final int SOCKET_CONNECTION_MAX_RETRY = 30;
+
     private MenuItem.OnClickListener mFinalClickListener = i -> {
         if (ActivityManager.isUserAMonkey()) {
             return;
@@ -101,13 +120,46 @@ public class FactoryResetConfirmFragment extends SettingsFragment {
                 Settings.Global.DEVICE_PROVISIONED, 0) != 0;
     }
 
-    private void resetEverything() {
-        Intent intent = new Intent(Intent.ACTION_FACTORY_RESET);
-        intent.setPackage("android");
-        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
-        intent.putExtra(Intent.EXTRA_REASON, "MasterClearConfirm");
-        intent.putExtra(Intent.EXTRA_WIPE_ESIMS, shouldResetEsim());
-        requireActivity().sendBroadcast(intent);
+    private boolean resetEverything() {
+        String is_ota_coor_on = SystemProperties.get("init.svc.ota_coordinator");
+        String is_reset_on = SystemProperties.get("vendor.ota_coordinator.factory_reset");
+        if ("running".equals(is_ota_coor_on) && "true".equals(is_reset_on)) {
+            Slog.i(TAG, "resetEverything: start");
+            OTASocket socket = connectService();
+            if (socket == null) {
+                Slog.e(TAG, "Failed to connect to OTA socket");
+                return false;
+            }
+            Slog.i(TAG, "resetEverything: connect service successfully !");
+            // Read the status from the socket.
+            try {
+                Slog.i(TAG, "sendCommand start_factory_reset!");
+                socket.sendCommand("start_factory_reset");
+            } catch (IOException e) {
+                Slog.e(TAG, "IOException when sending status: ", e);
+                return false;
+            } finally {
+                socket.close();
+                return true;
+            }
+        } else {
+            Intent intent = new Intent(Intent.ACTION_FACTORY_RESET);
+            intent.setPackage("android");
+            intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
+            intent.putExtra(Intent.EXTRA_REASON, "MasterClearConfirm");
+            intent.putExtra(Intent.EXTRA_WIPE_ESIMS, shouldResetEsim());
+            requireActivity().sendBroadcast(intent);
+            return true;
+        }
+    }
+
+    public OTASocket connectService() {
+        OTASocket socket = new OTASocket();
+        if (!socket.connectService()) {
+            socket.close();
+            return null;
+        }
+        return socket;
     }
 
     private boolean shouldResetEsim() {
@@ -145,4 +197,83 @@ public class FactoryResetConfirmFragment extends SettingsFragment {
             mProgressDialog.show();
         }
     }
+
+
+    /**
+     * Provides a wrapper for the low-level details of framing packets sent to the OTA
+     * socket.
+     */
+    public static class OTASocket {
+        private LocalSocket mLocalSocket;
+        private DataInputStream mInputStream;
+        private DataOutputStream mOutputStream;
+
+        /**
+         * Attempt to connect to the uncrypt service. Connection will be retried for up to
+         * {@link #SOCKET_CONNECTION_MAX_RETRY} times. If the connection is unsuccessful, the
+         * socket will be closed. If the connection is successful, the connection must be closed
+         * by the caller.
+         *
+         * @return true if connection was successful, false if unsuccessful
+         */
+        public boolean connectService() {
+            mLocalSocket = new LocalSocket();
+            boolean done = false;
+            // The uncrypt socket will be created by init upon receiving the
+            // service request. It may not be ready by this point. So we will
+            // keep retrying until success or reaching timeout.
+            for (int retry = 0; retry < SOCKET_CONNECTION_MAX_RETRY; retry++) {
+                try {
+                    Slog.i(TAG, "try connectService!");
+                    mLocalSocket.connect(new LocalSocketAddress(OTA_SOCKET,
+                            LocalSocketAddress.Namespace.RESERVED));
+                    done = true;
+                    break;
+                } catch (IOException e) {
+                    Slog.e(TAG, "Failed to connect to service on attempt " + (retry + 1), e);
+                    try {
+                        Thread.sleep(1000);
+                    } catch (InterruptedException ee) {
+                        Slog.w(TAG, "Interrupted:", ee);
+                    }
+                }
+            }
+            if (!done) {
+                Slog.e(TAG, "Timed out connecting to uncrypt socket");
+                close();
+                return false;
+            }
+
+            try {
+                mInputStream = new DataInputStream(mLocalSocket.getInputStream());
+                mOutputStream = new DataOutputStream(mLocalSocket.getOutputStream());
+            } catch (IOException e) {
+                close();
+                return false;
+            }
+
+            return true;
+        }
+
+        /**
+         * Sends a command to the uncrypt service.
+         *
+         * @param command command to send to the uncrypt service
+         * @throws IOException if there was an error writing to the socket
+         */
+        public void sendCommand(String command) throws IOException {
+            byte[] cmdUtf8 = command.getBytes(StandardCharsets.UTF_8);
+            mOutputStream.write(cmdUtf8);
+        }
+
+        /**
+         * Closes the socket and all underlying data streams.
+         */
+        public void close() {
+            IoUtils.closeQuietly(mInputStream);
+            IoUtils.closeQuietly(mOutputStream);
+            IoUtils.closeQuietly(mLocalSocket);
+        }
+    }
+
 }
-- 
2.43.0

